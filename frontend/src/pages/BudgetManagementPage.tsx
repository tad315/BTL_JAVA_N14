import { useEffect, useState } from "react";
import {
  Box, Typography, TextField, Button, Table, TableBody, TableCell,
  TableContainer, TableHead, TableRow, Paper, IconButton, InputAdornment,
  Dialog, DialogTitle, DialogContent, DialogActions
} from "@mui/material";
import { Search, Edit, Delete } from "@mui/icons-material";
import DashboardLayout from "../components/DashboardLayout";
import { getBudgets, deleteBudget, createBudget } from "../services/budgetService";
import api from "../api"; // üÜï d√πng api.put khi update

// ‚úÖ Interface d·ªØ li·ªáu
interface Budget {
  id: number;
  category: string;
  limitAmount: number;
  spent: number;
  month: string;
  walletId: number;
}

const BudgetManagementPage = () => {
  const [searchTerm, setSearchTerm] = useState("");
  const [budgets, setBudgets] = useState<Budget[]>([]);
  const [loading, setLoading] = useState(false);

  // üÜï State cho dialog th√™m/s·ª≠a
  const [openDialog, setOpenDialog] = useState(false);
  const [editingBudget, setEditingBudget] = useState<Budget | null>(null);
  const [formData, setFormData] = useState({
    category: "",
    limitAmount: 0,
    spent: 0,
    month: "",
    walletId: 1,
  });

  // ‚úÖ L·∫•y danh s√°ch
  useEffect(() => {
    fetchBudgets();
  }, []);

  const fetchBudgets = async () => {
    setLoading(true);
    try {
      const data = await getBudgets();
      setBudgets(data);
    } catch (err) {
      console.error("‚ùå L·ªói t·∫£i ng√¢n s√°ch:", err);
    } finally {
      setLoading(false);
    }
  };

  // ‚úÖ M·ªü form th√™m m·ªõi
  const handleOpenAdd = () => {
    setEditingBudget(null);
    setFormData({
      category: "",
      limitAmount: 0,
      spent: 0,
      month: "",
      walletId: 1,
    });
    setOpenDialog(true);
  };

  // ‚úÖ M·ªü form ch·ªânh s·ª≠a
  const handleOpenEdit = (budget: Budget) => {
    setEditingBudget(budget);
    setFormData({
      category: budget.category,
      limitAmount: budget.limitAmount,
      spent: budget.spent,
      month: budget.month,
      walletId: budget.walletId,
    });
    setOpenDialog(true);
  };

  // ‚úÖ L∆∞u d·ªØ li·ªáu (t·ª± ƒë·ªông ph√¢n bi·ªát th√™m/s·ª≠a)
  const handleSave = async () => {
    try {
      if (!formData.category || !formData.limitAmount || !formData.month) {
        alert("‚ö†Ô∏è Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin!");
        return;
      }

      if (editingBudget) {
        // ‚úèÔ∏è Update
        await api.put(`/budgets/${editingBudget.id}`, formData);
      } else {
        // ‚ûï Create
        await createBudget(formData);
      }

      setOpenDialog(false);
      await fetchBudgets();
    } catch (err) {
      alert("‚ùå L·ªói khi l∆∞u ng√¢n s√°ch!");
      console.error(err);
    }
  };

  // ‚úÖ X√≥a ng√¢n s√°ch
  const handleDelete = async (id: number) => {
    if (!window.confirm("B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a ng√¢n s√°ch n√†y kh√¥ng?")) return;
    try {
      await deleteBudget(id);
      setBudgets((prev) => prev.filter((b) => b.id !== id));
    } catch (err) {
      console.error("‚ùå L·ªói khi x√≥a ng√¢n s√°ch:", err);
    }
  };

  // ‚úÖ L·ªçc t√¨m ki·∫øm
  const filteredBudgets = budgets.filter((b) =>
    b.category?.toLowerCase().includes(searchTerm.toLowerCase())
  );

  return (
    <DashboardLayout>
      <Box>
        <Typography variant="h5" sx={{ mb: 3, fontWeight: 600, color: "#2E5B47" }}>
          Qu·∫£n l√Ω ng√¢n s√°ch:
        </Typography>

        {/* Thanh t√¨m ki·∫øm + n√∫t th√™m */}
        <Box
          sx={{
            display: "flex",
            justifyContent: "space-between",
            alignItems: "center",
            mb: 3,
            gap: 2,
            flexWrap: "wrap",
          }}
        >
          <TextField
            placeholder="T√¨m ki·∫øm danh m·ª•c..."
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
            sx={{
              minWidth: { xs: "100%", sm: "300px" },
              "& .MuiOutlinedInput-root": {
                backgroundColor: "#fff",
                borderRadius: "25px",
                "& fieldset": { borderColor: "#6B8E7F" },
                "&:hover fieldset": { borderColor: "#2E5B47" },
              },
            }}
            InputProps={{
              startAdornment: (
                <InputAdornment position="start">
                  <Search sx={{ color: "#6B8E7F" }} />
                </InputAdornment>
              ),
            }}
          />

          <Button
            variant="contained"
            onClick={handleOpenAdd}
            sx={{
              backgroundColor: "#6B8E7F",
              color: "#fff",
              borderRadius: "25px",
              px: 4,
              py: 1,
              textTransform: "none",
              fontSize: "1rem",
              "&:hover": { backgroundColor: "#2E5B47" },
            }}
          >
            + Th√™m danh m·ª•c
          </Button>
        </Box>

        {/* B·∫£ng */}
        <TableContainer
          component={Paper}
          sx={{
            borderRadius: 2,
            boxShadow: "0 4px 16px rgba(0,0,0,0.15)",
            backgroundColor: "rgba(255, 255, 255, 0.95)",
            backdropFilter: "blur(10px)",
          }}
        >
          <Table>
            <TableHead>
              <TableRow sx={{ backgroundColor: "#6B8E7F" }}>
                <TableCell sx={{ color: "#fff", fontWeight: 600 }}>Danh m·ª•c</TableCell>
                <TableCell sx={{ color: "#fff", fontWeight: 600 }}>Ng√¢n s√°ch</TableCell>
                <TableCell sx={{ color: "#fff", fontWeight: 600 }}>ƒê√£ chi</TableCell>
                <TableCell sx={{ color: "#fff", fontWeight: 600 }}>C√≤n l·∫°i</TableCell>
                <TableCell sx={{ color: "#fff", fontWeight: 600 }}>Th√°ng</TableCell>
                <TableCell sx={{ color: "#fff", fontWeight: 600 }}>Actions</TableCell>
              </TableRow>
            </TableHead>

            <TableBody>
              {loading ? (
                <TableRow>
                  <TableCell colSpan={6} align="center">
                    ƒêang t·∫£i d·ªØ li·ªáu...
                  </TableCell>
                </TableRow>
              ) : filteredBudgets.length > 0 ? (
                filteredBudgets.map((b) => {
                  const remaining = (b.limitAmount || 0) - (b.spent || 0);
                  return (
                    <TableRow key={b.id}>
                      <TableCell>{b.category}</TableCell>
                      <TableCell>{b.limitAmount?.toLocaleString()} VND</TableCell>
                      <TableCell>{b.spent?.toLocaleString()} VND</TableCell>
                      <TableCell>{remaining.toLocaleString()} VND</TableCell>
                      <TableCell>{b.month}</TableCell>
                      <TableCell>
                        <Box sx={{ display: "flex", gap: 1 }}>
                          <IconButton
                            size="small"
                            sx={{ color: "#6B8E7F" }}
                            onClick={() => handleOpenEdit(b)}
                          >
                            <Edit />
                          </IconButton>
                          <IconButton
                            size="small"
                            sx={{ color: "#f44336" }}
                            onClick={() => handleDelete(b.id)}
                          >
                            <Delete />
                          </IconButton>
                        </Box>
                      </TableCell>
                    </TableRow>
                  );
                })
              ) : (
                <TableRow>
                  <TableCell colSpan={6} align="center">
                    Kh√¥ng c√≥ d·ªØ li·ªáu ng√¢n s√°ch
                  </TableCell>
                </TableRow>
              )}
            </TableBody>
          </Table>
        </TableContainer>

        {/* üÜï Dialog Th√™m / S·ª≠a */}
        <Dialog open={openDialog} onClose={() => setOpenDialog(false)} maxWidth="xs" fullWidth>
          <DialogTitle>
            {editingBudget ? "Ch·ªânh s·ª≠a ng√¢n s√°ch" : "Th√™m ng√¢n s√°ch m·ªõi"}
          </DialogTitle>
          <DialogContent
            sx={{ display: "flex", flexDirection: "column", gap: 2, mt: 1 }}
          >
            <TextField
              label="Danh m·ª•c"
              value={formData.category}
              onChange={(e) =>
                setFormData({ ...formData, category: e.target.value })
              }
              fullWidth
            />
            <TextField
              label="Gi·ªõi h·∫°n (VND)"
              type="number"
              value={formData.limitAmount}
              onChange={(e) =>
                setFormData({ ...formData, limitAmount: Number(e.target.value) })
              }
              fullWidth
            />
            <TextField
              label="ƒê√£ chi (VND)"
              type="number"
              value={formData.spent}
              onChange={(e) =>
                setFormData({ ...formData, spent: Number(e.target.value) })
              }
              fullWidth
            />
            <TextField
              label="Th√°ng (YYYY-MM)"
              value={formData.month}
              onChange={(e) =>
                setFormData({ ...formData, month: e.target.value })
              }
              placeholder="2025-10"
              fullWidth
            />
          </DialogContent>
          <DialogActions>
            <Button onClick={() => setOpenDialog(false)}>H·ªßy</Button>
            <Button
              variant="contained"
              sx={{ backgroundColor: "#6B8E7F" }}
              onClick={handleSave}
            >
              L∆∞u
            </Button>
          </DialogActions>
        </Dialog>
      </Box>
    </DashboardLayout>
  );
};

export default BudgetManagementPage;
